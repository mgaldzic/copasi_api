SET(LIBRARY_OUTPUT_PATH ${EXECUTABLE_OUTPUT_PATH})

#---------------------
#    OS STUFF
#---------------------
IF (WIN32)

   SET(BUILD_OS WIN32)

ELSE(WIN32)	
	
	IF (UNIX)
		IF (APPLE)
			SET(BUILD_OS MAC)
		ELSEIF(APPLE)
			SET(BUILD_OS LINUX)
		ENDIF(APPLE)
	ENDIF(UNIX)

ENDIF(WIN32)

#-----------------------------------
#    INCLUDE DIRECTORIES
#-----------------------------------

INCLUDE_DIRECTORIES( 
	BEFORE
	${COPASIAPI_SOURCE_DIR}/API
	${COPASIAPI_SOURCE_DIR}/expat/
	${COPASIAPI_SOURCE_DIR}/expat/lib
	${COPASIAPI_SOURCE_DIR}/libSBML/include
	${COPASIAPI_SOURCE_DIR}/libSBML/src
	${COPASIAPI_SOURCE_DIR}/copasi
	${COPASIAPI_SOURCE_DIR}/raptor/src
	${COPASIAPI_SOURCE_DIR}/raptor/librdfa
	${COPASIAPI_SOURCE_DIR}/raptor/util
	${COPASIAPI_SOURCE_DIR}/Antimony
	${COPASIAPI_SOURCE_DIR}/galib/ga
	${COPASIAPI_SOURCE_DIR}/galib
	${COPASIAPI_SOURCE_DIR}/libstructural/include/
)

#---------------------
#    DEFINITIONS
#---------------------

#ADD_DEFINITIONS(-DCOPASI_MAIN)
ADD_DEFINITIONS(-DWITH_CSPMETHOD)
#ADD_DEFINITIONS(-D__cplusplus)
ADD_DEFINITIONS(-DUSE_CLAPACK)
#ADD_DEFINITIONS(-DUSE_LAPACK)
#ADD_DEFINITIONS(-DCOPASI_DEBUG)
#ADD_DEFINITIONS(-DDEBUG_MATRIX)
ADD_DEFINITIONS(-DTC_EXPORTS)

#------------------------------------------
#  DEFINITIONS FOR WINDOWS
#------------------------------------------

IF (WIN32)
	ADD_DEFINITIONS(-DWIN32)
	ADD_DEFINITIONS(-D_WIN32)
	ADD_DEFINITIONS(-D_WINDOWS)
	ADD_DEFINITIONS(-D_USRDLL)
	ADD_DEFINITIONS(-D_EXPORTS)
	ADD_DEFINITIONS(-DLIBSBML_EXPORTS)
	#ADD_DEFINITIONS(-DIN_LIBXML)
	IF (MINGW)
		ADD_DEFINITIONS(-DCYGWIN)
		ADD_DEFINITIONS(-D__CYGWIN__)
		IF (USE_STDCALL)
			ADD_DEFINITIONS(-DUSE_STDCALL)
		 ENDIF(USE_STDCALL)
	ELSE(MINGW)
		ADD_DEFINITIONS(-Dstrcasecmp=_stricmp)
		ADD_DEFINITIONS(-Dstrncasecmp=_strnicmp)
	ENDIF(MINGW)
ENDIF (WIN32)
 IF (APPLE)
  	 ADD_DEFINITIONS(-D_APPLE)
ENDIF(APPLE)
#--------------------------------------------------------------------------
#  Special link flags for MS Windows
#--------------------------------------------------------------------------
IF ( WIN32  )
	IF (MINGW)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--enable-auto-import")
		OPTION( USE_STDCALL "Use this to enable stdcall instead of cdecl calling convention. Use this if you want to use a library 	in MS applications. This might cause issues in some libraries, such as embedded python" OFF)
		IF (USE_STDCALL)
				SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} 	-Wl,--enable-auto-import,--add-stdcall-alias,--out-implib")
			ELSE(USE_STDCALL)
				SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--enable-auto-import")
		ENDIF(USE_STDCALL)
	ELSE(MINGW) #MSVC issues
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /FORCE:MULTIPLE /SUBSYSTEM:CONSOLE")
		SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /FORCE:MULTIPLE")
	ENDIF (MINGW)
ENDIF ( WIN32 )
#--------------------------
#  COPASI SOURCE FILES
#--------------------------

FILE( GLOB copasi_SRC_FILES
	${COPASIAPI_SOURCE_DIR}/copasi/model/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/compareExpressions/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/CopasiDataModel/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/crosssection/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/elementaryFluxModes/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/function/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/layout/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/libs/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/lyap/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/moieties/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/odepack++/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/optimization/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/parameterFitting/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/plot/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/randomGenerator/*.cpp	
	${COPASIAPI_SOURCE_DIR}/copasi/sbml/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/sbmlunit/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/scan/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/sensitivities/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/steadystate/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/report/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/trajectory/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/tss/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/tssanalysis/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/utilities/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/xml/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/commandline/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/MIRIAM/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/MIRIAM/WebServicesIssues/*.cpp
	${COPASIAPI_SOURCE_DIR}/copasi/copasi_api.cpp
	${COPASIAPI_SOURCE_DIR}/API/TC_structs.c
	${COPASIAPI_SOURCE_DIR}/c/mtrand.c
)

ADD_DEFINITIONS(-DHAVE_EXPAT_CONFIG_H)
FILE( GLOB  EXPAT_SRC_FILES   ${COPASIAPI_SOURCE_DIR}/expat/lib/*.c)

#--------------------------
#  MAKE libcopasi
#--------------------------

ADD_LIBRARY( copasi
#  STATIC
  SHARED
  ${copasi_SRC_FILES}
  ${EXPAT_SRC_FILES}
)

TARGET_LINK_LIBRARIES( copasi
  copasi
  sbml
  raptor
  lapack
  blas
  f2c
  antimony
  galib
  structural
  muparser
  ${QT_QTCORE_LIBRARY}
)

#----------------------------------
#  INSTALL libcopasi in . (CPack)
#----------------------------------

IF ( WIN32 )
   INSTALL(TARGETS copasi DESTINATION bin/../)
ELSE ( WIN32 )
   INSTALL(TARGETS copasi LIBRARY DESTINATION bin/../)
ENDIF( WIN32 )

#----------------------------------
#  COPASI api
#----------------------------------

OPTION( TEST_COPASI_API "test copasi api" ON )

IF (TEST_COPASI_API)
  ADD_EXECUTABLE(copasi_api_test test_copasi.c)
  TARGET_LINK_LIBRARIES( copasi_api_test copasi)
ENDIF (TEST_COPASI_API)

