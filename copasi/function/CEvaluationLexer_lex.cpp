// Begin CVS Header
//   $Source: /fs/turing/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
//   $Revision: 1.27 $
//   $Name: Build-33 $
//   $Author: shoops $
//   $Date: 2010/02/19 18:16:15 $
// End CVS Header

// Copyright (C) 2010 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., University of Heidelberg, and The University
// of Manchester.
// All rights reserved.

#line 2 "CEvaluationLexer_lex.cpp"

#line 4 "CEvaluationLexer_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer CEvaluationFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
  do \
    {\
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      *yy_cp = (yy_hold_char); \
      YY_RESTORE_YY_MORE_OFFSET \
      (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
      YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
  while (0)

#define unput(c) yyunput(c, (yytext_ptr))

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{

  std::istream* yy_input_file;

  char *yy_ch_buf;    /* input buffer */
  char *yy_buf_pos;   /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) \
                            ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                            : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CEvaluationalloc(yy_size_t);
void *CEvaluationrealloc(void *, yy_size_t);
void CEvaluationfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
  {\
    if (! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer(yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol) \
  {\
    if (! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer(yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "copasi/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  (yytext_ptr) = yy_bp; \
  yyleng = (size_t) (yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp; \
  *yy_cp = '\0'; \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[559] =
  {0,
      0,    0,    0,    0,    0,    0,    0,    0,   74,   72,
      71,   71,   72,   62,   65,   68,   60,   58,   67,   57,
      61,    1,   72,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   59,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   66,
      69,   72,   63,   64,   72,   72,   72,   72,   72,   72,
      72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      72,   72,   72,   72,   72,   70,   70,   71,    0,   70,
      0,    1,    1,    0,    0,   18,    0,   56,   70,   70,

      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,    3,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
      0,    0,    0,   11,   12,    0,    0,    9,    0,   10,
      0,   13,    0,   17,    3,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      0,    0,    0,    0,    0,    0,   70,   70,    1,    0,
      1,   55,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   54,   70,   70,    7,
      70,    8,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    7,    0,    0,
      0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      0,    0,    0,    0,    0,    0,    0,    0,   47,   70,
      70,   70,   70,   70,   70,   70,   23,   70,   27,   70,
      26,   70,   70,   21,   70,   70,   70,   70,   70,   19,
      70,   70,   25,   70,   22,   70,   70,   24,   70,    4,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
      70,   70,   70,   70,   70,   34,   36,   49,   29,   33,

      32,   70,   70,   70,    5,   70,   70,   70,   70,   31,
      28,   46,   30,   70,   70,   70,   70,   70,   70,   70,
      70,   70,   70,   70,    0,    0,    0,    0,    0,    0,
      0,    0,    5,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,   70,   70,
      70,   70,   70,   70,   53,   70,   70,   48,   70,   20,
      70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      70,   70,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,   70,   39,   70,   38,   70,   37,   70,

      70,   70,   70,   70,   70,   52,   70,   70,   70,   70,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,   41,   45,   44,   43,   40,   42,   70,
      70,    6,   51,   70,   70,    0,    0,    6,    0,    0,
      70,   70,   70,    0,    0,    0,   70,   50,   70,    0,
      0,   70,   70,    0,    0,    2,    2,    0
  };

static yyconst flex_int32_t yy_ec[256] =
  {0,
      1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
      1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    2,    1,    4,    1,    1,    5,    1,    1,    6,
      7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
      16,   16,   16,   16,   16,   16,   16,    1,    1,   17,
      1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
      25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
      34,   35,   36,   37,   38,   28,   28,   39,   40,   28,
      1,   41,    1,   42,   28,    1,   43,   44,   45,   46,

      47,   48,   49,   50,   51,   28,   28,   52,   53,   54,
      55,   56,   57,   58,   59,   60,   61,   28,   28,   62,
      63,   28,   64,    1,   65,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1
  };

static yyconst flex_int32_t yy_meta[66] =
  {0,
      1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
      1,    1,    1,    2,    2,    2,    1,    1,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    1,    1
  };

static yyconst flex_int16_t yy_base[564] =
  {0,
      0,    0,    0,    0,   65,    0,  122,  123, 1204, 1205,
      133,  135,  137, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
      1205,  128,  121,  144, 1197,  150,  140,  146,  139,  143,
      151,  165,  142,  164,  153,  183, 1205,  149,  184,  154,
      141,  186,  193,  155,  189,  160,  198,  190,  196, 1205,
      1205,  196, 1205, 1205,  199, 1196,  234,  200,  212,  246,
      219,  247,  253,  254,  248,  252,  257,  262,  256,  261,
      255,  263,  258,  266,  268,  282,  276,  286,  288,  289,
      283,  297,  295,  296,  290,  300,  306,  210,  317, 1195,
      1197,  341,  351,  361,  286, 1205, 1196, 1191, 1191,  301,

      319,  362,  333,  209,  346,  353,  363,  311,  372,  365,
      330, 1190,  292,  374,  373,  375, 1189,  376,  385,  379,
      386,  381,  394,  387,  389,  390,  396,  395,  397,  400,
      405,  401,  402,  409,  407,  403,  414,  412,  416,  419,
      417,  420,  418,  421,  422,  426, 1188, 1190, 1186,  433,
      423,  427,  431,  430,  426,  450,  459,  462,  464, 1185,
      469,  478,  473, 1184, 1183, 1182,  302, 1181,  475, 1180,
      479, 1179,  474, 1178, 1177,  480,  481,  482,  483,  484,
      486,  485,  435,  491,  492,  497,  498,  500,  502,  505,
      509,  510,  512,  515,  517,  513,  520,  519,  518,  521,

      523,  522,  524,  525,  528,  526,  535,  527,  536,  521,
      541, 1205, 1176,  538,  569,  557,  565,  552,  576,  581,
      583,  585,  586,  587,  589,  588, 1174,  592,  211, 1174,
      591, 1173,  597,  602,  593,  605,  594,  608,  542,  604,
      606,  607,  610,  609,  616,  620,  628,  621,  623,  627,
      629,  630,  425,  632,  637,  638,  631,  639,  633,  634,
      1172,  636, 1171,  669,  642,  646,  640,  641,  648,  652,
      649,  647,  659,  686,  687,  688,  428, 1170,  691,  692,
      694,  689,  697,  693,  701, 1169,  645,  695,  696,  702,
      705,  703,  708,  711,  704,  707,  706,  718,  721,  722,

      635,  725,  724,  729,  723,  730,  728,  733, 1167, 1167,
      727,  737,  726, 1166, 1165, 1164, 1162, 1162, 1160, 1160,
      1158, 1158,  731, 1156,  736,  738,  742,  762,  763, 1155,
      210,  732, 1154, 1154, 1152, 1152, 1151, 1149, 1149, 1148,
      740,  743,  735,  746,  778,  779,  781,  782,  784,  785,
      533,  787,  789, 1147,  786,  790,  793, 1146, 1145, 1144,
      1143, 1142, 1141,  794,  795,  799,  797,  800,  801,  802,
      804, 1140, 1139, 1138, 1137, 1136,  805,  798,  803,  808,
      809,  813,  815,  818,  819,  821,  832,  837,  834, 1134,
      822,  839,  841,  842,  843, 1133, 1132, 1131, 1130, 1129,

      1128, 1128,  846,  849, 1127, 1126,  855, 1125,  850, 1123,
      1122, 1121, 1120,  857,  858,  860,  862,  865,  870,  875,
      872,  877,  879,  880,  884,  881,  882,  885,  892, 1120,
      887,  890, 1119, 1118,  888, 1117,  898,  891,  889,  894,
      895,  893,  900,  903,  902,  905,  906,  907,  908,  926,
      927,  929,  931,  935, 1115,  936,  937, 1114,  938, 1113,
      1113,  939,  923,  930,  940,  945,  953,  956,  957,  962,
      960,  964,  965,  966,  968,  970,  971,  972,  973,  975,
      977, 1112,  978,  976,  979,  980,  981,  982,  983,  987,
      993,  994,  995, 1111, 1109, 1102, 1099, 1099, 1097, 1096,

      1094, 1093,  999, 1003, 1006, 1091, 1091, 1001, 1004, 1009,
      1090, 1089, 1088, 1087, 1086, 1084, 1012, 1015, 1010, 1083,
      1013, 1017, 1018, 1080, 1075, 1072, 1071, 1070, 1068, 1029,
      1022, 1065, 1062, 1019, 1031, 1032, 1033,  651, 1034, 1036,
      1039,  650, 1021, 1046,  539, 1037, 1047,  533, 1049, 1057,
      1051, 1061, 1060, 1068, 1062,  436,  221, 1205, 1109, 1111,
      220, 1113,  219
  };

static yyconst flex_int16_t yy_def[564] =
  {0,
      558,    1,    1,    1,  558,    5,    1,    1,  558,  558,
      558,  558,  559,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  560,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  558,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  558,
      558,  562,  558,  558,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  561,  561,  558,  559,  558,
      559,  558,  558,  558,  560,  558,  560,  558,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  562,  558,  562,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  561,  561,  558,  558,
      558,  558,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  558,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  558,  561,
      561,  561,  561,  561,  561,  561,  558,  561,  558,  561,
      558,  561,  561,  558,  561,  561,  561,  561,  561,  558,
      561,  561,  558,  561,  558,  561,  561,  558,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  558,
      561,  561,  561,  561,  561,  558,  558,  558,  558,  558,

      558,  561,  561,  561,  561,  561,  561,  561,  561,  558,
      558,  558,  558,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  561,  561,
      561,  561,  561,  561,  558,  561,  561,  558,  561,  558,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  561,  558,  561,  558,  561,  558,  561,

      561,  561,  561,  561,  561,  558,  561,  561,  561,  561,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  558,  558,  558,  558,  558,  558,  561,
      561,  561,  558,  561,  561,  563,  563,  563,  563,  563,
      561,  561,  561,  563,  563,  563,  561,  558,  561,  563,
      563,  561,  561,  563,  563,  561,  563,    0,  558,  558,
      558,  558,  558
  };

static yyconst flex_int16_t yy_nxt[1271] =
  {0,
      10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
      20,   10,   21,   22,   22,   22,   23,   10,   24,   25,
      26,   27,   28,   29,   25,   25,   30,   25,   31,   25,
      32,   25,   33,   25,   25,   34,   35,   36,   25,   25,
      10,   37,   38,   25,   39,   40,   41,   42,   25,   25,
      43,   44,   25,   45,   25,   46,   25,   25,   47,   48,
      49,   25,   25,   50,   51,   10,   11,   12,   52,   14,
      15,   16,   17,   53,   19,   54,   10,   21,   22,   22,
      22,   23,   10,   55,   56,   57,   58,   59,   60,   61,
      56,   62,   56,   63,   56,   64,   65,   66,   56,   56,

      67,   68,   69,   70,   56,   10,   37,   71,   56,   72,
      73,   74,   75,   76,   56,   77,   78,   56,   79,   80,
      81,   56,   56,   82,   83,   84,   85,   56,   50,   51,
      10,   10,   10,   10,   88,   88,   88,   88,   96,   92,
      90,   93,   93,   93,   98,   98,   98,   98,   98,   98,
      94,   98,   86,   86,   98,   98,   98,  110,   98,   98,
      98,   97,  108,  100,  101,   98,  112,  111,  117,   98,
      98,  121,  105,  113,   94,   87,   87,   91,  102,  103,
      104,  106,  114,  115,  109,  107,  118,  122,   98,   98,
      119,   98,  124,  125,   98,   98,  116,  120,   98,  147,

      132,   98,  133,   98,   98,   98,  126,  127,  128,  137,
      117,   88,   88,  123,   98,   98,  330,   98,  150,  151,
      149,   99,  159,  408,   98,  331,   98,  217,  134,  152,
      129,  138,  143,  153,  154,  155,  148,  135,  130,   98,
      112,  164,  131,  139,  140,  160,  136,  144,  141,  145,
      161,   98,   98,   98,  142,  165,  156,   98,   98,   98,
      98,   98,   98,   98,  162,  157,   98,   98,   98,  158,
      166,   98,  171,   98,  163,  168,  172,  167,  175,  176,
      179,   98,  174,  177,  169,  173,  181,   98,   98,  170,
      178,   98,  182,   98,   98,   98,  180,   98,  183,  184,

      98,   98,   98,   96,  192,   98,   98,   98,  185,  189,
      194,   98,  186,  187,  188,  228,   98,  190,  115,  195,
      90,  191,  160,  166,   98,  276,   97,  193,  164,  196,
      198,  207,  168,  175,  172,   98,  213,  203,   98,  222,
      197,  165,  199,  200,  206,  170,  174,  201,  138,  205,
      214,   98,  204,  202,  209,  209,  209,   91,   98,  216,
      208,  226,   92,   94,   93,   93,   93,   98,   98,  210,
      98,  210,  218,   94,  211,  211,  211,   98,   98,   98,
      98,   98,  215,  221,   98,  224,   98,   94,  219,  220,
      98,   98,   98,  225,   98,   98,  233,   94,  229,   98,

      98,   98,   98,  230,  223,   98,   98,   98,   98,  231,
      98,  232,   98,  235,   98,  234,  236,   98,  237,   98,
      238,   98,   98,   98,   98,   98,   98,   98,   98,  147,
      330,   98,   98,  330,  240,   98,   98,  242,   98,  351,
      98,   98,  370,  239,  266,  213,  241,  243,  263,  246,
      252,  264,  247,  249,  262,   98,  265,  248,  244,  245,
      250,  251,  253,  255,   98,  230,  148,   98,  261,   98,
      256,  258,  260,  254,   98,  232,  267,  257,   98,   98,
      98,  259,  270,   98,   98,   98,   98,   98,   98,   98,
      98,   98,  271,  261,  268,  269,   98,   98,  273,  277,

      280,  272,   98,   98,  275,   98,  274,   98,  279,  278,
      98,  281,  285,  283,   98,   98,  282,   98,   98,  286,
      98,  284,   98,   98,   98,   98,   98,   98,   98,   98,
      98,   98,   98,   98,  211,  211,  211,  263,   98,  212,
      98,  288,  290,   98,  548,  287,  408,   98,  289,  209,
      209,  209,  291,  294,  211,  211,  211,   98,   94,  297,
      300,  295,   98,  292,  293,  303,  298,  296,  301,  231,
      98,  299,  278,  310,   98,  302,  304,  306,  308,  305,
      316,  317,   94,  286,  254,  307,  319,  314,  321,  311,
      98,  324,   98,   98,   98,  315,   98,   98,   98,   98,

      310,  318,  333,  323,  312,  313,  320,  335,  322,   98,
      338,   98,   98,   98,  317,   98,  340,  325,  329,  328,
      332,  319,  334,  326,  327,  321,  324,  336,   98,  337,
      339,  341,   98,   98,   98,   98,   98,   98,   98,   98,
      330,   98,  333,  335,  338,   98,  317,   98,  342,  387,
      98,   98,  324,  319,   98,  548,   98,  321,  318,  314,
      315,  316,  343,  344,   98,  320,  361,  364,  360,  322,
      345,  354,  358,  362,   98,  346,  359,  363,  365,  340,
      350,  353,  347,  349,  352,  348,  334,  336,  339,  355,
      337,   98,   98,   98,   98,  366,   98,  333,   98,  335,

      98,   98,  338,  354,  356,  357,   98,   98,  317,   98,
      98,   98,  324,  319,  369,  376,  321,  372,  368,  373,
      371,  367,  375,   98,  377,  374,   98,   98,   98,  333,
      98,   98,   98,   98,  335,  338,   98,   98,   98,  378,
      98,   98,   98,   98,  395,   98,  381,   98,   98,  358,
      409,   98,  361,  379,  380,  359,  360,  362,  391,  393,
      363,  382,  392,  394,  405,  383,  403,   98,   98,  404,
      402,  414,  386,  372,  376,  385,  384,  388,  373,  375,
      389,  417,  374,   98,   98,  418,   98,   98,  419,   98,
      98,   98,   98,  407,   98,   98,  406,  415,   98,   98,

      98,  416,   98,   98,   98,   98,   98,   98,   98,   98,
      98,  429,  427,   98,   98,  436,  428,  425,   98,  433,
      98,  426,  437,   98,   98,  431,   98,   98,  405,  423,
      432,  435,  420,  430,  434,  421,  438,   98,  422,   98,
      402,  406,   98,  424,   98,  436,   98,   98,   98,  441,
      443,   98,  439,  442,   98,   98,  440,  449,  450,  451,
      98,  452,   98,   98,  433,   98,  444,   98,  456,  445,
      98,  430,  453,  454,  446,   98,  434,   98,  461,  447,
      98,  459,   98,  457,   98,   98,   98,   98,  448,   98,
      98,  462,   98,   98,   98,   98,   98,   98,   98,   98,

      98,  475,  476,   98,  465,   98,  466,   98,   98,  479,
      98,   98,   98,   98,  481,  477,  463,  464,  467,  473,
      474,  469,  478,  468,  480,  483,  482,  471,   98,  470,
      461,  495,  497,  494,  499,  495,   98,  472,  486,  487,
      98,   98,   98,   98,   98,  497,  488,  484,  485,  490,
      499,  496,  498,  489,  500,  492,  501,  482,   98,  491,
      502,   98,   98,  504,  493,   98,  503,   98,  507,   98,
      98,  495,  494,  497,  505,  499,   98,   98,   98,  496,
      98,   98,   98,   98,  495,  497,  499,   98,   98,  498,
      511,  512,   98,  513,  500,  514,  515,  516,   98,   98,

      98,  518,  501,  517,   98,  502,   98,  520,   98,   98,
      508,   98,  509,  519,   98,   98,  507,   98,   98,  510,
      98,  531,   98,   98,   98,  511,   98,   98,  512,  513,
      514,  515,  516,  537,   98,  530,   98,   98,   98,   98,
      521,   98,   98,  522,   98,  532,  535,  520,  536,  538,
      542,   98,   98,  523,   98,  541,   98,  547,  544,  540,
      534,  545,   98,  549,  550,   98,   98,   98,  212,  543,
      98,  532,  539,   98,  212,  552,  212,  212,  212,  551,
      538,  212,  542,  556,  546,  554,  212,  545,  533,  529,
      557,  528,  527,  526,  525,  524,  533,  212,  529,  528,

      553,  527,  555,  212,  526,  212,  556,  525,  557,   89,
      89,   95,   95,  146,  146,  212,  524,  506,  506,  212,
      212,  212,  460,  458,   98,  455,  212,  212,  212,  212,
      460,  458,   98,  455,  212,  212,  212,  212,  212,  212,
      212,   98,  413,  412,  411,  410,  401,  400,  399,  398,
      397,  396,  390,   98,  413,  212,  412,  411,  212,  410,
      212,  212,  212,  401,  212,  400,  212,  399,  212,  398,
      397,  396,  390,  212,   98,   98,   98,  309,   98,   98,
      212,  309,   98,   98,   98,   98,   98,  227,   98,   98,
      98,   98,  558,   98,   98,  227,   98,  212,  558,  558,

      98,   98,   98,  558,    9,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558
  };

static yyconst flex_int16_t yy_chk[1271] =
  {0,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      7,    8,    7,    8,   11,   11,   12,   12,   23,   22,
      13,   22,   22,   22,   29,   27,   41,   33,   30,   24,
      22,   28,    7,    8,   38,   26,   31,   29,   35,   40,
      44,   23,   27,   24,   24,   46,   30,   29,   33,   34,
      32,   35,   26,   30,   22,    7,    8,   13,   24,   24,
      24,   26,   31,   32,   28,   26,   34,   35,   36,   39,
      34,   42,   38,   38,   45,   48,   32,   34,   43,   52,

      40,   49,   41,   47,   55,   58,   38,   38,   38,   44,
      46,   88,   88,   36,  104,  331,  229,   59,   55,   55,
      563,  561,   58,  331,   61,  229,  557,  104,   42,   55,
      39,   45,   48,   55,   55,   55,   52,   42,   39,   57,
      43,   61,   39,   45,   47,   59,   43,   48,   47,   49,
      59,   60,   62,   65,   47,   61,   57,   66,   63,   64,
      71,   69,   67,   73,   60,   57,   70,   68,   72,   57,
      62,   74,   64,   75,   60,   63,   64,   62,   66,   67,
      68,   77,   65,   67,   63,   64,   69,   76,   81,   63,
      67,   78,   70,   79,   80,   85,   68,  113,   71,   71,

      83,   84,   82,   95,   73,   86,  100,  167,   71,   72,
      75,   87,   71,   71,   71,  113,  108,   72,   86,   75,
      89,   72,   74,   77,  101,  167,   95,   74,   76,   77,
      79,   86,   78,   81,   79,  111,  100,   83,  103,  108,
      78,   76,   79,   82,   85,   78,   80,   82,   87,   84,
      101,  105,   83,   82,   92,   92,   92,   89,  106,  103,
      87,  111,   93,   92,   93,   93,   93,  102,  107,   94,
      110,   94,  105,   93,   94,   94,   94,  109,  115,  114,
      116,  118,  102,  107,  120,  110,  122,   92,  106,  106,
      119,  121,  124,  110,  125,  126,  118,   93,  114,  123,

      128,  127,  129,  115,  109,  130,  132,  133,  136,  116,
      131,  116,  135,  120,  134,  119,  121,  138,  122,  137,
      123,  139,  141,  143,  140,  142,  144,  145,  151,  146,
      253,  155,  152,  277,  126,  154,  153,  128,  150,  253,
      183,  556,  277,  125,  155,  124,  127,  129,  152,  131,
      136,  153,  132,  134,  151,  156,  154,  133,  130,  130,
      134,  135,  137,  140,  157,  138,  146,  158,  150,  159,
      141,  143,  145,  139,  161,  139,  156,  142,  163,  173,
      169,  144,  158,  162,  171,  176,  177,  178,  179,  180,
      182,  181,  159,  183,  157,  157,  184,  185,  162,  169,

      176,  161,  186,  187,  163,  188,  162,  189,  173,  171,
      190,  177,  181,  179,  191,  192,  178,  193,  196,  182,
      194,  180,  195,  199,  198,  197,  200,  202,  201,  203,
      204,  206,  208,  205,  210,  210,  210,  185,  351,  548,
      207,  186,  188,  214,  545,  184,  351,  239,  187,  209,
      209,  209,  189,  191,  211,  211,  211,  218,  209,  194,
      196,  192,  216,  190,  190,  200,  194,  193,  197,  207,
      217,  195,  198,  214,  215,  199,  201,  203,  205,  202,
      218,  219,  209,  206,  208,  204,  220,  216,  221,  215,
      222,  223,  224,  226,  225,  217,  231,  228,  235,  237,

      239,  219,  233,  222,  215,  215,  220,  234,  221,  240,
      236,  241,  242,  238,  244,  243,  237,  223,  228,  226,
      231,  245,  233,  224,  225,  246,  248,  234,  249,  235,
      236,  238,  250,  247,  251,  252,  257,  254,  259,  260,
      301,  262,  255,  256,  258,  267,  268,  265,  240,  301,
      287,  266,  272,  269,  271,  542,  538,  270,  244,  241,
      242,  243,  240,  240,  273,  245,  268,  271,  267,  246,
      247,  262,  265,  269,  264,  248,  266,  270,  272,  259,
      252,  260,  249,  251,  254,  250,  255,  256,  258,  264,
      257,  274,  275,  276,  282,  273,  279,  280,  284,  281,

      288,  289,  283,  287,  264,  264,  285,  290,  292,  295,
      291,  297,  296,  293,  276,  284,  294,  280,  275,  281,
      279,  274,  283,  298,  285,  282,  299,  300,  305,  303,
      302,  313,  311,  307,  304,  306,  323,  332,  308,  288,
      343,  325,  312,  326,  313,  341,  295,  327,  342,  289,
      332,  344,  292,  288,  288,  290,  291,  293,  311,  312,
      294,  296,  311,  312,  327,  297,  325,  328,  329,  326,
      323,  341,  300,  303,  307,  299,  298,  302,  304,  306,
      308,  343,  305,  345,  346,  343,  347,  348,  344,  349,
      350,  355,  352,  329,  353,  356,  328,  342,  357,  364,

      365,  342,  367,  378,  366,  368,  369,  370,  379,  371,
      377,  357,  356,  380,  381,  370,  356,  355,  382,  367,
      383,  355,  371,  384,  385,  365,  386,  391,  348,  352,
      366,  369,  346,  364,  368,  347,  377,  387,  350,  389,
      345,  349,  388,  353,  392,  387,  393,  394,  395,  379,
      380,  403,  378,  379,  404,  409,  378,  391,  391,  392,
      407,  393,  414,  415,  384,  416,  382,  417,  403,  383,
      418,  381,  394,  395,  386,  419,  385,  421,  409,  388,
      420,  407,  422,  404,  423,  424,  426,  427,  389,  425,
      428,  414,  431,  435,  439,  432,  438,  429,  442,  440,

      441,  426,  427,  437,  416,  443,  417,  445,  444,  431,
      446,  447,  448,  449,  435,  428,  415,  415,  418,  425,
      425,  420,  429,  419,  432,  438,  437,  422,  463,  421,
      423,  450,  451,  449,  452,  464,  453,  424,  440,  441,
      454,  456,  457,  459,  462,  465,  442,  439,  439,  444,
      466,  450,  451,  443,  452,  446,  453,  447,  467,  445,
      454,  468,  469,  457,  448,  471,  456,  470,  462,  472,
      473,  474,  463,  475,  459,  476,  477,  478,  479,  464,
      480,  484,  481,  483,  485,  486,  487,  488,  489,  465,
      473,  474,  490,  475,  466,  476,  477,  478,  491,  492,

      493,  480,  467,  479,  503,  468,  508,  483,  504,  509,
      469,  505,  470,  481,  510,  519,  472,  517,  521,  471,
      518,  504,  522,  523,  534,  484,  543,  531,  485,  486,
      487,  488,  489,  518,  530,  503,  535,  536,  537,  539,
      490,  540,  546,  491,  541,  505,  509,  493,  517,  519,
      531,  544,  547,  492,  549,  530,  551,  541,  536,  522,
      508,  537,  550,  543,  544,  553,  552,  555,  533,  534,
      532,  510,  521,  554,  529,  547,  528,  527,  526,  546,
      523,  525,  535,  552,  539,  550,  524,  540,  520,  516,
      554,  515,  514,  513,  512,  511,  507,  506,  502,  501,

      549,  500,  551,  499,  498,  497,  553,  496,  555,  559,
      559,  560,  560,  562,  562,  495,  494,  482,  461,  460,
      458,  455,  436,  434,  433,  430,  413,  412,  411,  410,
      408,  406,  405,  402,  401,  400,  399,  398,  397,  396,
      390,  376,  375,  374,  373,  372,  363,  362,  361,  360,
      359,  358,  354,  340,  339,  338,  337,  336,  335,  334,
      333,  330,  324,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  310,  309,  286,  278,  263,  261,  232,  230,
      227,  213,  175,  174,  172,  170,  168,  166,  165,  164,
      160,  149,  148,  147,  117,  112,   99,   98,   97,   91,

      90,   56,   25,    9,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
/* scanner for kinetic functions */

#line 12 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
  mpNode = NULL;\
  mPosition = 0;\
  mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
  mPosition += yyleng;\
  mpNodeList->push_back(mpNode);

#line 897 "CEvaluationLexer_lex.cpp"

#define INITIAL 0
#define sSIGN 1
#define sOPERATOR 2
#define sID 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  \
  if ((result = LexerInput((char *) buf, max_size )) < 0 ) \
    YY_FATAL_ERROR("input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 1002 "CEvaluationLexer_lex.cpp"

  if (!(yy_init))
    {
      (yy_init) = 1;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      if (!(yy_start))
        (yy_start) = 1; /* first start state */

      if (! yyin)
        yyin = & std::cin;

      if (! yyout)
        yyout = & std::cout;

      if (! YY_CURRENT_BUFFER)
        {
          yyensure_buffer_stack();
          YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE);
        }

      yy_load_buffer_state();
    }

  while (1)      /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
yy_match:

      do
        {
          register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];

          if (yy_accept[yy_current_state])
            {
              (yy_last_accepting_state) = yy_current_state;
              (yy_last_accepting_cpos) = yy_cp;
            }

          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];

              if (yy_current_state >= 559)
                yy_c = yy_meta[(unsigned int) yy_c];
            }

          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_current_state != 558);

      yy_cp = (yy_last_accepting_cpos);
      yy_current_state = (yy_last_accepting_state);

yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

do_action:  /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
          case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

          case 1:
            YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 2:
            YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 3:
            YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 4:
            YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 5:
            YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 6:
            YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 7:
            YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_NaN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 8:
            YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NOT;

            YY_BREAK
          case 9:
            YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LE;

            YY_BREAK
          case 10:
            YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LT;

            YY_BREAK
          case 11:
            YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GE;

            YY_BREAK
          case 12:
            YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GT;

            YY_BREAK
          case 13:
            YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NE;

            YY_BREAK
          case 14:
            YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_EQ;

            YY_BREAK
          case 15:
            YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_AND;

            YY_BREAK
          case 16:
            YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_XOR;

            YY_BREAK
          case 17:
            YY_RULE_SETUP
#line 166 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_OR;

            YY_BREAK
          case 18:
            /* rule 18 can match eol */
            YY_RULE_SETUP
#line 174 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::CN,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 19:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 182 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 20:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 190 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 21:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 198 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 22:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 206 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 23:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 214 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 24:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 222 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 25:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 230 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 26:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 238 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 27:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 246 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 28:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 254 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 29:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 262 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 30:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 270 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 31:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 278 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 32:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 286 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 33:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 294 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 34:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 302 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 35:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 310 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 36:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 318 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 37:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 326 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 38:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 334 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 39:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 342 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 40:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 350 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 41:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 358 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 42:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 366 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 43:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 374 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 44:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 382 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 45:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 390 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 46:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 398 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 47:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 406 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 48:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 414 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 49:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 422 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 50:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 430 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 51:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 438 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RUNIFORM,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 52:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 446 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RNORMAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 53:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 454 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeDelay(CEvaluationNodeDelay::DELAY,
                                              yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 54:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 462 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_CHOICE;

            YY_BREAK
          case 55:
            /* rule 55 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 470 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
#line 481 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 57:
            YY_RULE_SETUP
#line 492 "CEvaluationLexer.lpp"

            BEGIN(sID);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 58:
            YY_RULE_SETUP
#line 500 "CEvaluationLexer.lpp"

            BEGIN(sID);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 59:
            YY_RULE_SETUP
#line 508 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_POWER;

            YY_BREAK
          case 60:
            YY_RULE_SETUP
#line 516 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 61:
            YY_RULE_SETUP
#line 524 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 62:
            YY_RULE_SETUP
#line 532 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MODULUS;

            YY_BREAK
          case 63:
            YY_RULE_SETUP
#line 540 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 64:
            YY_RULE_SETUP
#line 548 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 65:
            YY_RULE_SETUP
#line 556 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_OPEN;

            YY_BREAK
          case 66:
            YY_RULE_SETUP
#line 565 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_OPEN;

            YY_BREAK
          case 67:
            YY_RULE_SETUP
#line 574 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_COMMA;

            YY_BREAK
          case 68:
            YY_RULE_SETUP
#line 583 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_CLOSE;

            YY_BREAK
          case 69:
            YY_RULE_SETUP
#line 592 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_CLOSE;

            YY_BREAK
          case 70:
            /* rule 70 can match eol */
            YY_RULE_SETUP
#line 601 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_VARIABLE;

            YY_BREAK
          case 71:
            /* rule 71 can match eol */
            YY_RULE_SETUP
#line 609 "CEvaluationLexer.lpp"

            mPosition += yyleng;
            // mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
            //                                        yytext);
            // COMMON_ACTION;

            YY_BREAK
          case YY_STATE_EOF(INITIAL):
          case YY_STATE_EOF(sSIGN):
          case YY_STATE_EOF(sOPERATOR):
          case YY_STATE_EOF(sID):
#line 616 "CEvaluationLexer.lpp"
            return 0;
            YY_BREAK
          case 72:
            YY_RULE_SETUP
#line 618 "CEvaluationLexer.lpp"

            CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
            return YYERRCODE;

            YY_BREAK
          case 73:
            YY_RULE_SETUP
#line 623 "CEvaluationLexer.lpp"
            ECHO;
            YY_BREAK
#line 2008 "CEvaluationLexer_lex.cpp"

          case YY_END_OF_BUFFER:
          {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = (yy_last_accepting_cpos);
                    yy_current_state = (yy_last_accepting_state);
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                  case EOB_ACT_END_OF_FILE:
                  {
                    (yy_did_buffer_switch_on_eof) = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (!(yy_did_buffer_switch_on_eof))
                          YY_NEW_FILE;
                      }

                    break;
                  }

                  case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) =
                      (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_match;

                  case EOB_ACT_LAST_MATCH:
                    (yy_c_buf_p) =
                      &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_find_action;
                }

            break;
          }

          default:
            YY_FATAL_ERROR(
              "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 0;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = NULL;

  (yy_buffer_stack) = 0;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;

  yy_state_buf = 0;
}

yyFlexLexer::~yyFlexLexer()
{
  delete [] yy_state_buf;
  CEvaluationfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
}

void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(YY_CURRENT_BUFFER);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{

  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return -1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();

#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else
    {
      int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

          int yy_c_buf_p_offset =
            (int)((yy_c_buf_p) - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             CEvaluationrealloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
               (yy_n_chars), num_to_read);

      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  if ((yy_n_chars) == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);

      if (yy_accept[yy_current_state])
        {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }

      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];

          if (yy_current_state >= 559)
            yy_c = yy_meta[(unsigned int) yy_c];
        }

      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans(current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;

  if (yy_accept[yy_current_state])
    {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }

  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];

      if (yy_current_state >= 559)
        yy_c = yy_meta[(unsigned int) yy_c];
    }

  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 558);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = (yy_n_chars) + 2;
      register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
      register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

      while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int)(dest - source);
      yy_bp += (int)(dest - source);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

      if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  (yytext_ptr) = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
        /* This was really a NUL. */
        *(yy_c_buf_p) = '\0';

      else
        {/* need more input */
          int offset = (yy_c_buf_p) - (yytext_ptr);
          ++(yy_c_buf_p);

          switch (yy_get_next_buffer())
            {
              case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin);

                /*FALLTHROUGH*/

              case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return 0;

                if (!(yy_did_buffer_switch_on_eof))
                  YY_NEW_FILE;

#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

  c = *(unsigned char *)(yy_c_buf_p);   /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0'; /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{

  if (! YY_CURRENT_BUFFER)
    {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin, YY_BUF_SIZE);
    }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

  /* TODO. We should be able to replace this entire function body
   * with
   *    yypop_buffer_state();
   *    yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack();

  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) CEvaluationalloc(sizeof(struct yy_buffer_state));

  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) CEvaluationalloc(b->yy_buf_size + 2);

  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{

  if (! b)
    return;

  if (b == YY_CURRENT_BUFFER)   /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    CEvaluationfree((void *) b->yy_ch_buf);

  CEvaluationfree((void *) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream* file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER)
    {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
    }

  b->yy_is_interactive = 0;
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;

  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;

  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER)
    {
      yy_load_buffer_state();
      (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
  int num_to_alloc;

  if (!(yy_buffer_stack))
    {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
           */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
    }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
      (yy_buffer_stack_max) = num_to_alloc;
    }
}

void yyFlexLexer::yy_push_state(int new_state)
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
    {
      yy_size_t new_size;

      (yy_start_stack_depth) += YY_START_STACK_INCR;
      new_size = (yy_start_stack_depth) * sizeof(int);

      if (!(yy_start_stack))
        (yy_start_stack) = (int *) CEvaluationalloc(new_size);

      else
        (yy_start_stack) = (int *) CEvaluationrealloc((void *)(yy_start_stack), new_size);

      if (!(yy_start_stack))
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state()
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state()
{
  return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    {\
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      yytext[yyleng] = (yy_hold_char); \
      (yy_c_buf_p) = yytext + yyless_macro_arg; \
      (yy_hold_char) = *(yy_c_buf_p); \
      *(yy_c_buf_p) = '\0'; \
      yyleng = yyless_macro_arg; \
    } \
  while (0)

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, yyconst char * s2, int n)
{
  register int i;

  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char * s)
{
  register int n;

  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *CEvaluationalloc(yy_size_t  size)
{
  return (void *) malloc(size);
}

void *CEvaluationrealloc(void * ptr, yy_size_t  size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

void CEvaluationfree(void * ptr)
{
  free((char *) ptr);    /* see CEvaluationrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 623 "CEvaluationLexer.lpp"
