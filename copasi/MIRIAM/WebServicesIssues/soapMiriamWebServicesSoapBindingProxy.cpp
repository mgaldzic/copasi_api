// Begin CVS Header
//   $Source: /fs/turing/cvs/copasi_dev/copasi/MIRIAM/WebServicesIssues/soapMiriamWebServicesSoapBindingProxy.cpp,v $
//   $Revision: 1.4 $
//   $Name: Build-33 $
//   $Author: shoops $
//   $Date: 2009/04/21 16:17:18 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

/* soapMiriamWebServicesSoapBindingProxy.cpp
   Generated by gSOAP 2.7.12 from MIRIAM.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
 */

#include "soapMiriamWebServicesSoapBindingProxy.h"

MiriamWebServicesSoapBindingProxy::MiriamWebServicesSoapBindingProxy()
{
  MiriamWebServicesSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MiriamWebServicesSoapBindingProxy::MiriamWebServicesSoapBindingProxy(const struct soap &soap)
{
  soap_copy_context(this, &soap);
  MiriamWebServicesSoapBindingProxy_init(soap.imode, soap.omode);
}

MiriamWebServicesSoapBindingProxy::MiriamWebServicesSoapBindingProxy(soap_mode iomode)
{
  MiriamWebServicesSoapBindingProxy_init(iomode, iomode);
}

MiriamWebServicesSoapBindingProxy::MiriamWebServicesSoapBindingProxy(soap_mode imode, soap_mode omode)
{
  MiriamWebServicesSoapBindingProxy_init(imode, omode);
}

void MiriamWebServicesSoapBindingProxy::MiriamWebServicesSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{
  soap_imode(this, imode);
  soap_omode(this, omode);
  soap_endpoint = NULL;
  static const struct Namespace namespaces[] =
  {
    {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
    {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
    {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
    {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
    {"ns2", "http://ws.miriam.ebi.ac.uk", NULL, NULL},
    {NULL, NULL, NULL, NULL}
  };

  if (!this->namespaces)
    this->namespaces = namespaces;
}

MiriamWebServicesSoapBindingProxy::~MiriamWebServicesSoapBindingProxy()
{}

void MiriamWebServicesSoapBindingProxy::soap_noheader()
{
  header = NULL;
}

const SOAP_ENV__Fault *MiriamWebServicesSoapBindingProxy::soap_fault()
{
  return this->fault;
}

const char *MiriamWebServicesSoapBindingProxy::soap_fault_string()
{
  return *soap_faultstring(this);
}

const char *MiriamWebServicesSoapBindingProxy::soap_fault_detail()
{
  return *soap_faultdetail(this);
}

int MiriamWebServicesSoapBindingProxy::soap_close_socket()
{
  return soap_closesock(this);
}

void MiriamWebServicesSoapBindingProxy::soap_print_fault(FILE *fd)
{
  ::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void MiriamWebServicesSoapBindingProxy::soap_stream_fault(std::ostream& os)
{
  ::soap_stream_fault(this, os);
}

char *MiriamWebServicesSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{
  return ::soap_sprint_fault(this, buf, len);
}
#endif

int MiriamWebServicesSoapBindingProxy::getName(std::string _uri, std::string &_getNameReturn)
{
  struct soap *soap = this;
  struct ns2__getName soap_tmp_ns2__getName;
  struct ns2__getNameResponse *soap_tmp_ns2__getNameResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getName._uri = _uri;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getName(soap, &soap_tmp_ns2__getName);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getName(soap, &soap_tmp_ns2__getName, "ns2:getName", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getName(soap, &soap_tmp_ns2__getName, "ns2:getName", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getNameReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getNameReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getNameResponse = soap_get_ns2__getNameResponse(soap, NULL, "ns2:getNameResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getNameReturn = soap_tmp_ns2__getNameResponse->_getNameReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getLocation(std::string _uri, std::string _resource, std::string &_getLocationReturn)
{
  struct soap *soap = this;
  struct ns2__getLocation soap_tmp_ns2__getLocation;
  struct ns2__getLocationResponse *soap_tmp_ns2__getLocationResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getLocation._uri = _uri;
  soap_tmp_ns2__getLocation._resource = _resource;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getLocation(soap, &soap_tmp_ns2__getLocation);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getLocation(soap, &soap_tmp_ns2__getLocation, "ns2:getLocation", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getLocation(soap, &soap_tmp_ns2__getLocation, "ns2:getLocation", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getLocationReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getLocationReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getLocationResponse = soap_get_ns2__getLocationResponse(soap, NULL, "ns2:getLocationResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getLocationReturn = soap_tmp_ns2__getLocationResponse->_getLocationReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getURI(std::string _name, std::string _id, std::string &_getURIReturn)
{
  struct soap *soap = this;
  struct ns2__getURI soap_tmp_ns2__getURI;
  struct ns2__getURIResponse *soap_tmp_ns2__getURIResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getURI._name = _name;
  soap_tmp_ns2__getURI._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getURI(soap, &soap_tmp_ns2__getURI);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getURI(soap, &soap_tmp_ns2__getURI, "ns2:getURI", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getURI(soap, &soap_tmp_ns2__getURI, "ns2:getURI", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getURIReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getURIReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getURIResponse = soap_get_ns2__getURIResponse(soap, NULL, "ns2:getURIResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getURIReturn = soap_tmp_ns2__getURIResponse->_getURIReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataResources(std::string _nickname, struct ns2__getDataResourcesResponse &_param_1)
{
  struct soap *soap = this;
  struct ns2__getDataResources soap_tmp_ns2__getDataResources;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataResources._nickname = _nickname;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataResources(soap, &soap_tmp_ns2__getDataResources);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataResources(soap, &soap_tmp_ns2__getDataResources, "ns2:getDataResources", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataResources(soap, &soap_tmp_ns2__getDataResources, "ns2:getDataResources", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_1)
    return soap_closesock(soap);

  soap_default_ns2__getDataResourcesResponse(soap, &_param_1);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getDataResourcesResponse(soap, &_param_1, "ns2:getDataResourcesResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getServicesInfo(std::string &getServicesInfoReturn)
{
  struct soap *soap = this;
  struct ns2__getServicesInfo soap_tmp_ns2__getServicesInfo;
  struct ns2__getServicesInfoResponse *soap_tmp_ns2__getServicesInfoResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getServicesInfo(soap, &soap_tmp_ns2__getServicesInfo);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getServicesInfo(soap, &soap_tmp_ns2__getServicesInfo, "ns2:getServicesInfo", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getServicesInfo(soap, &soap_tmp_ns2__getServicesInfo, "ns2:getServicesInfo", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&getServicesInfoReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &getServicesInfoReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getServicesInfoResponse = soap_get_ns2__getServicesInfoResponse(soap, NULL, "ns2:getServicesInfoResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  getServicesInfoReturn = soap_tmp_ns2__getServicesInfoResponse->getServicesInfoReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getServicesVersion(std::string &getServicesVersionReturn)
{
  struct soap *soap = this;
  struct ns2__getServicesVersion soap_tmp_ns2__getServicesVersion;
  struct ns2__getServicesVersionResponse *soap_tmp_ns2__getServicesVersionResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getServicesVersion(soap, &soap_tmp_ns2__getServicesVersion);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getServicesVersion(soap, &soap_tmp_ns2__getServicesVersion, "ns2:getServicesVersion", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getServicesVersion(soap, &soap_tmp_ns2__getServicesVersion, "ns2:getServicesVersion", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&getServicesVersionReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &getServicesVersionReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getServicesVersionResponse = soap_get_ns2__getServicesVersionResponse(soap, NULL, "ns2:getServicesVersionResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  getServicesVersionReturn = soap_tmp_ns2__getServicesVersionResponse->getServicesVersionReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getJavaLibraryVersion(std::string &getJavaLibraryVersionReturn)
{
  struct soap *soap = this;
  struct ns2__getJavaLibraryVersion soap_tmp_ns2__getJavaLibraryVersion;
  struct ns2__getJavaLibraryVersionResponse *soap_tmp_ns2__getJavaLibraryVersionResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getJavaLibraryVersion(soap, &soap_tmp_ns2__getJavaLibraryVersion);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getJavaLibraryVersion(soap, &soap_tmp_ns2__getJavaLibraryVersion, "ns2:getJavaLibraryVersion", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getJavaLibraryVersion(soap, &soap_tmp_ns2__getJavaLibraryVersion, "ns2:getJavaLibraryVersion", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&getJavaLibraryVersionReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &getJavaLibraryVersionReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getJavaLibraryVersionResponse = soap_get_ns2__getJavaLibraryVersionResponse(soap, NULL, "ns2:getJavaLibraryVersionResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  getJavaLibraryVersionReturn = soap_tmp_ns2__getJavaLibraryVersionResponse->getJavaLibraryVersionReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypeURI(std::string _name, std::string &_getDataTypeURIReturn)
{
  struct soap *soap = this;
  struct ns2__getDataTypeURI soap_tmp_ns2__getDataTypeURI;
  struct ns2__getDataTypeURIResponse *soap_tmp_ns2__getDataTypeURIResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataTypeURI._name = _name;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypeURI(soap, &soap_tmp_ns2__getDataTypeURI);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypeURI(soap, &soap_tmp_ns2__getDataTypeURI, "ns2:getDataTypeURI", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypeURI(soap, &soap_tmp_ns2__getDataTypeURI, "ns2:getDataTypeURI", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getDataTypeURIReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getDataTypeURIReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getDataTypeURIResponse = soap_get_ns2__getDataTypeURIResponse(soap, NULL, "ns2:getDataTypeURIResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getDataTypeURIReturn = soap_tmp_ns2__getDataTypeURIResponse->_getDataTypeURIReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypeURIs(std::string _name, struct ns2__getDataTypeURIsResponse &_param_2)
{
  struct soap *soap = this;
  struct ns2__getDataTypeURIs soap_tmp_ns2__getDataTypeURIs;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataTypeURIs._name = _name;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypeURIs(soap, &soap_tmp_ns2__getDataTypeURIs);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypeURIs(soap, &soap_tmp_ns2__getDataTypeURIs, "ns2:getDataTypeURIs", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypeURIs(soap, &soap_tmp_ns2__getDataTypeURIs, "ns2:getDataTypeURIs", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_2)
    return soap_closesock(soap);

  soap_default_ns2__getDataTypeURIsResponse(soap, &_param_2);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getDataTypeURIsResponse(soap, &_param_2, "ns2:getDataTypeURIsResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypeDef(std::string _nickname, std::string &_getDataTypeDefReturn)
{
  struct soap *soap = this;
  struct ns2__getDataTypeDef soap_tmp_ns2__getDataTypeDef;
  struct ns2__getDataTypeDefResponse *soap_tmp_ns2__getDataTypeDefResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataTypeDef._nickname = _nickname;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypeDef(soap, &soap_tmp_ns2__getDataTypeDef);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypeDef(soap, &soap_tmp_ns2__getDataTypeDef, "ns2:getDataTypeDef", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypeDef(soap, &soap_tmp_ns2__getDataTypeDef, "ns2:getDataTypeDef", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getDataTypeDefReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getDataTypeDefReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getDataTypeDefResponse = soap_get_ns2__getDataTypeDefResponse(soap, NULL, "ns2:getDataTypeDefResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getDataTypeDefReturn = soap_tmp_ns2__getDataTypeDefResponse->_getDataTypeDefReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getLocations(std::string _nickname, std::string _id, struct ns2__getLocationsResponse &_param_3)
{
  struct soap *soap = this;
  struct ns2__getLocations soap_tmp_ns2__getLocations;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getLocations._nickname = _nickname;
  soap_tmp_ns2__getLocations._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getLocations(soap, &soap_tmp_ns2__getLocations);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getLocations(soap, &soap_tmp_ns2__getLocations, "ns2:getLocations", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getLocations(soap, &soap_tmp_ns2__getLocations, "ns2:getLocations", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_3)
    return soap_closesock(soap);

  soap_default_ns2__getLocationsResponse(soap, &_param_3);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getLocationsResponse(soap, &_param_3, "ns2:getLocationsResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getLocations_(std::string _nickname, std::string _id, struct ns2__getLocationsResponse_ &_param_4)
{
  struct soap *soap = this;
  struct ns2__getLocations_ soap_tmp_ns2__getLocations_;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getLocations_._nickname = _nickname;
  soap_tmp_ns2__getLocations_._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getLocations_(soap, &soap_tmp_ns2__getLocations_);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getLocations_(soap, &soap_tmp_ns2__getLocations_, "ns2:getLocations", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getLocations_(soap, &soap_tmp_ns2__getLocations_, "ns2:getLocations", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_4)
    return soap_closesock(soap);

  soap_default_ns2__getLocationsResponse_(soap, &_param_4);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getLocationsResponse_(soap, &_param_4, "ns2:getLocationsResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::isDeprecated(std::string _uri, std::string &_isDeprecatedReturn)
{
  struct soap *soap = this;
  struct ns2__isDeprecated soap_tmp_ns2__isDeprecated;
  struct ns2__isDeprecatedResponse *soap_tmp_ns2__isDeprecatedResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__isDeprecated._uri = _uri;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__isDeprecated(soap, &soap_tmp_ns2__isDeprecated);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__isDeprecated(soap, &soap_tmp_ns2__isDeprecated, "ns2:isDeprecated", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__isDeprecated(soap, &soap_tmp_ns2__isDeprecated, "ns2:isDeprecated", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_isDeprecatedReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_isDeprecatedReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__isDeprecatedResponse = soap_get_ns2__isDeprecatedResponse(soap, NULL, "ns2:isDeprecatedResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _isDeprecatedReturn = soap_tmp_ns2__isDeprecatedResponse->_isDeprecatedReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getOfficialDataTypeURI(std::string _uri, std::string &_getOfficialDataTypeURIReturn)
{
  struct soap *soap = this;
  struct ns2__getOfficialDataTypeURI soap_tmp_ns2__getOfficialDataTypeURI;
  struct ns2__getOfficialDataTypeURIResponse *soap_tmp_ns2__getOfficialDataTypeURIResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getOfficialDataTypeURI._uri = _uri;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getOfficialDataTypeURI(soap, &soap_tmp_ns2__getOfficialDataTypeURI);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getOfficialDataTypeURI(soap, &soap_tmp_ns2__getOfficialDataTypeURI, "ns2:getOfficialDataTypeURI", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getOfficialDataTypeURI(soap, &soap_tmp_ns2__getOfficialDataTypeURI, "ns2:getOfficialDataTypeURI", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getOfficialDataTypeURIReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getOfficialDataTypeURIReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getOfficialDataTypeURIResponse = soap_get_ns2__getOfficialDataTypeURIResponse(soap, NULL, "ns2:getOfficialDataTypeURIResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getOfficialDataTypeURIReturn = soap_tmp_ns2__getOfficialDataTypeURIResponse->_getOfficialDataTypeURIReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getMiriamURI(std::string _uri, std::string &_getMiriamURIReturn)
{
  struct soap *soap = this;
  struct ns2__getMiriamURI soap_tmp_ns2__getMiriamURI;
  struct ns2__getMiriamURIResponse *soap_tmp_ns2__getMiriamURIResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getMiriamURI._uri = _uri;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getMiriamURI(soap, &soap_tmp_ns2__getMiriamURI);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getMiriamURI(soap, &soap_tmp_ns2__getMiriamURI, "ns2:getMiriamURI", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getMiriamURI(soap, &soap_tmp_ns2__getMiriamURI, "ns2:getMiriamURI", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getMiriamURIReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getMiriamURIReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getMiriamURIResponse = soap_get_ns2__getMiriamURIResponse(soap, NULL, "ns2:getMiriamURIResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getMiriamURIReturn = soap_tmp_ns2__getMiriamURIResponse->_getMiriamURIReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypePattern(std::string _nickname, std::string &_getDataTypePatternReturn)
{
  struct soap *soap = this;
  struct ns2__getDataTypePattern soap_tmp_ns2__getDataTypePattern;
  struct ns2__getDataTypePatternResponse *soap_tmp_ns2__getDataTypePatternResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataTypePattern._nickname = _nickname;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypePattern(soap, &soap_tmp_ns2__getDataTypePattern);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypePattern(soap, &soap_tmp_ns2__getDataTypePattern, "ns2:getDataTypePattern", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypePattern(soap, &soap_tmp_ns2__getDataTypePattern, "ns2:getDataTypePattern", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getDataTypePatternReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getDataTypePatternReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getDataTypePatternResponse = soap_get_ns2__getDataTypePatternResponse(soap, NULL, "ns2:getDataTypePatternResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getDataTypePatternReturn = soap_tmp_ns2__getDataTypePatternResponse->_getDataTypePatternReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getResourceInfo(std::string _id, std::string &_getResourceInfoReturn)
{
  struct soap *soap = this;
  struct ns2__getResourceInfo soap_tmp_ns2__getResourceInfo;
  struct ns2__getResourceInfoResponse *soap_tmp_ns2__getResourceInfoResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getResourceInfo._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getResourceInfo(soap, &soap_tmp_ns2__getResourceInfo);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getResourceInfo(soap, &soap_tmp_ns2__getResourceInfo, "ns2:getResourceInfo", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getResourceInfo(soap, &soap_tmp_ns2__getResourceInfo, "ns2:getResourceInfo", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getResourceInfoReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getResourceInfoReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getResourceInfoResponse = soap_get_ns2__getResourceInfoResponse(soap, NULL, "ns2:getResourceInfoResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getResourceInfoReturn = soap_tmp_ns2__getResourceInfoResponse->_getResourceInfoReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getResourceInstitution(std::string _id, std::string &_getResourceInstitutionReturn)
{
  struct soap *soap = this;
  struct ns2__getResourceInstitution soap_tmp_ns2__getResourceInstitution;
  struct ns2__getResourceInstitutionResponse *soap_tmp_ns2__getResourceInstitutionResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getResourceInstitution._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getResourceInstitution(soap, &soap_tmp_ns2__getResourceInstitution);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getResourceInstitution(soap, &soap_tmp_ns2__getResourceInstitution, "ns2:getResourceInstitution", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getResourceInstitution(soap, &soap_tmp_ns2__getResourceInstitution, "ns2:getResourceInstitution", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getResourceInstitutionReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getResourceInstitutionReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getResourceInstitutionResponse = soap_get_ns2__getResourceInstitutionResponse(soap, NULL, "ns2:getResourceInstitutionResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getResourceInstitutionReturn = soap_tmp_ns2__getResourceInstitutionResponse->_getResourceInstitutionReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getResourceLocation(std::string _id, std::string &_getResourceLocationReturn)
{
  struct soap *soap = this;
  struct ns2__getResourceLocation soap_tmp_ns2__getResourceLocation;
  struct ns2__getResourceLocationResponse *soap_tmp_ns2__getResourceLocationResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getResourceLocation._id = _id;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getResourceLocation(soap, &soap_tmp_ns2__getResourceLocation);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getResourceLocation(soap, &soap_tmp_ns2__getResourceLocation, "ns2:getResourceLocation", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getResourceLocation(soap, &soap_tmp_ns2__getResourceLocation, "ns2:getResourceLocation", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_getResourceLocationReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_getResourceLocationReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__getResourceLocationResponse = soap_get_ns2__getResourceLocationResponse(soap, NULL, "ns2:getResourceLocationResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _getResourceLocationReturn = soap_tmp_ns2__getResourceLocationResponse->_getResourceLocationReturn;
  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypeSynonyms(std::string _name, struct ns2__getDataTypeSynonymsResponse &_param_5)
{
  struct soap *soap = this;
  struct ns2__getDataTypeSynonyms soap_tmp_ns2__getDataTypeSynonyms;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getDataTypeSynonyms._name = _name;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypeSynonyms(soap, &soap_tmp_ns2__getDataTypeSynonyms);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypeSynonyms(soap, &soap_tmp_ns2__getDataTypeSynonyms, "ns2:getDataTypeSynonyms", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypeSynonyms(soap, &soap_tmp_ns2__getDataTypeSynonyms, "ns2:getDataTypeSynonyms", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_5)
    return soap_closesock(soap);

  soap_default_ns2__getDataTypeSynonymsResponse(soap, &_param_5);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getDataTypeSynonymsResponse(soap, &_param_5, "ns2:getDataTypeSynonymsResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getNames(std::string _uri, struct ns2__getNamesResponse &_param_6)
{
  struct soap *soap = this;
  struct ns2__getNames soap_tmp_ns2__getNames;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__getNames._uri = _uri;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getNames(soap, &soap_tmp_ns2__getNames);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getNames(soap, &soap_tmp_ns2__getNames, "ns2:getNames", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getNames(soap, &soap_tmp_ns2__getNames, "ns2:getNames", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_6)
    return soap_closesock(soap);

  soap_default_ns2__getNamesResponse(soap, &_param_6);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getNamesResponse(soap, &_param_6, "ns2:getNamesResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypesName(struct ns2__getDataTypesNameResponse &_param_7)
{
  struct soap *soap = this;
  struct ns2__getDataTypesName soap_tmp_ns2__getDataTypesName;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypesName(soap, &soap_tmp_ns2__getDataTypesName);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypesName(soap, &soap_tmp_ns2__getDataTypesName, "ns2:getDataTypesName", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypesName(soap, &soap_tmp_ns2__getDataTypesName, "ns2:getDataTypesName", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_7)
    return soap_closesock(soap);

  soap_default_ns2__getDataTypesNameResponse(soap, &_param_7);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getDataTypesNameResponse(soap, &_param_7, "ns2:getDataTypesNameResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::getDataTypesId(struct ns2__getDataTypesIdResponse &_param_8)
{
  struct soap *soap = this;
  struct ns2__getDataTypesId soap_tmp_ns2__getDataTypesId;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__getDataTypesId(soap, &soap_tmp_ns2__getDataTypesId);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__getDataTypesId(soap, &soap_tmp_ns2__getDataTypesId, "ns2:getDataTypesId", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__getDataTypesId(soap, &soap_tmp_ns2__getDataTypesId, "ns2:getDataTypesId", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_param_8)
    return soap_closesock(soap);

  soap_default_ns2__getDataTypesIdResponse(soap, &_param_8);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_get_ns2__getDataTypesIdResponse(soap, &_param_8, "ns2:getDataTypesIdResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  return soap_closesock(soap);
}

int MiriamWebServicesSoapBindingProxy::checkRegExp(std::string _identifier, std::string _datatype, std::string &_checkRegExpReturn)
{
  struct soap *soap = this;
  struct ns2__checkRegExp soap_tmp_ns2__checkRegExp;
  struct ns2__checkRegExpResponse *soap_tmp_ns2__checkRegExpResponse;
  const char *soap_action = NULL;

  if (!soap_endpoint)
    soap_endpoint = "http://www.ebi.ac.uk/compneur-srv/miriamws-main/MiriamWebServices";

  soap_action = "";
  soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
  soap_tmp_ns2__checkRegExp._identifier = _identifier;
  soap_tmp_ns2__checkRegExp._datatype = _datatype;
  soap_begin(soap);
  soap_serializeheader(soap);
  soap_serialize_ns2__checkRegExp(soap, &soap_tmp_ns2__checkRegExp);

  if (soap_begin_count(soap))
    return soap->error;

  if (soap->mode & SOAP_IO_LENGTH)
    {
      if (soap_envelope_begin_out(soap)
          || soap_putheader(soap)
          || soap_body_begin_out(soap)
          || soap_put_ns2__checkRegExp(soap, &soap_tmp_ns2__checkRegExp, "ns2:checkRegExp", "")
          || soap_body_end_out(soap)
          || soap_envelope_end_out(soap))
        return soap->error;
    }

  if (soap_end_count(soap))
    return soap->error;

  if (soap_connect(soap, soap_endpoint, soap_action)
      || soap_envelope_begin_out(soap)
      || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || soap_put_ns2__checkRegExp(soap, &soap_tmp_ns2__checkRegExp, "ns2:checkRegExp", "")
      || soap_body_end_out(soap)
      || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap_closesock(soap);

  if (!&_checkRegExpReturn)
    return soap_closesock(soap);

  soap_default_std__string(soap, &_checkRegExpReturn);

  if (soap_begin_recv(soap)
      || soap_envelope_begin_in(soap)
      || soap_recv_header(soap)
      || soap_body_begin_in(soap))
    return soap_closesock(soap);

  soap_tmp_ns2__checkRegExpResponse = soap_get_ns2__checkRegExpResponse(soap, NULL, "ns2:checkRegExpResponse", "");

  if (soap->error)
    {
      if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
        return soap_recv_fault(soap);

      return soap_closesock(soap);
    }

  if (soap_body_end_in(soap)
      || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap_closesock(soap);

  _checkRegExpReturn = soap_tmp_ns2__checkRegExpResponse->_checkRegExpReturn;
  return soap_closesock(soap);
}
/* End of client proxy code */
