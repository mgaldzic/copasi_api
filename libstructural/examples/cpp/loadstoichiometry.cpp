#include <iostream>
#include <libstructural.h>
#include <matrix.h>
#include <vector>
#include <string>

using namespace std;
using namespace LIB_STRUCTURAL;
using namespace LIB_LA;

static double STOICHIOMETRY[4][3] = {{  0.0, -1.0,  1.0},  // ES
                                     {  1.0,  0.0, -1.0},  // S2
                                     { -1.0,  1.0,  0.0},  // S1
                                     {  0.0,  1.0, -1.0}}; // E

void InitializeValues(DoubleMatrix* &oMatrix, 
                      vector<string> &speciesNames, 
                      vector<double> &initialConcentrations, 
                      vector<string> &reactionNames);


int main(int argc, char*argv[])
{
        
        vector<string> speciesNames; vector<string> reactionNames;      
        vector<double> initialConentrations; DoubleMatrix* oMatrix;
        
        // some function that produces the stoichiometry matrix
        // and labels
        InitializeValues(oMatrix, speciesNames, initialConentrations, reactionNames);
        
        // get an instance of the library
        LibStructural* instance = LibStructural::getInstance();
        
        // load stoichiometry matrix and labels
        instance->loadStoichiometryMatrix(*oMatrix);
        instance->loadSpecies(speciesNames, initialConentrations);
        instance->loadReactionNames(reactionNames);

        // analyze the model and print overview
        cout << instance->analyzeWithQR();
        
        // print test details
        cout << instance->getTestDetails();
        
        // delete stoichiometry matrix
        delete oMatrix;
        
        return 0;
}

void InitializeValues(DoubleMatrix* &oMatrix, 
                      vector<string> &speciesNames, 
                      vector<double> &initialConcentrations, 
                      vector<string> &reactionNames)
{
	
        // build stoichiometry matrix (this should be easier!!!)
        double *row1 = STOICHIOMETRY[0], *row2 = STOICHIOMETRY[1], 
               *row3 = STOICHIOMETRY[2], *row4 = STOICHIOMETRY[3];
        
        const double* oMatrixRAW[] = {row1, row2, row3, row4};
        
        oMatrix = new DoubleMatrix(oMatrixRAW, 4, 3);
        
        speciesNames.push_back("ES"); speciesNames.push_back("S2"); 
        speciesNames.push_back("S1"); speciesNames.push_back("E"); 
        
        initialConcentrations.push_back(1.0);   initialConcentrations.push_back(1.0);   
        initialConcentrations.push_back(1.0);
        
        reactionNames.push_back("J1"); reactionNames.push_back("J2");
        reactionNames.push_back("J3");
}

// This is the output generated by the code above: 
//
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//STRUCTURAL ANALYSIS MODULE : Results 
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//Size of Stochiometric Matrix: 4 x 3 (Rank is  2)
//Nonzero entries in Stochiometric Matrix: 8  (66.6667% full)
//
//Independent Species (2) :
//ES, S2
//
//Dependent Species (2) :
//S1, E
//
//L0 : There are 2 dependencies. L0 is a 2x2 matrix.
//
//Conserved Entities
//1:  + ES + S2 + S1
//2:  + ES + E
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//Developed by the Computational Systems Biology Group at Keck Graduate Institute 
//and the Saurolab at the Bioengineering Departmant at  University of Washington.
//Contact : Frank T. Bergmann (fbergman@u.washington.edu) or Herbert M. Sauro.   
//
//(previous authors) Ravishankar Rao Vallabhajosyula                   
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//
//Testing Validity of Conservation Laws.
//
//Passed Test 1 : Gamma*N = 0 (Zero matrix)
//Passed Test 2 : Rank(N) using SVD (2) is same as m0 (2)
//Passed Test 3 : Rank(NR) using SVD (2) is same as m0 (2)
//Passed Test 4 : Rank(NR) using QR (2) is same as m0 (2)
//Passed Test 5 : L0 obtained with QR matches Q21*inv(Q11)
//Passed Test 6 : N*K = 0 (Zero matrix)
//
//

